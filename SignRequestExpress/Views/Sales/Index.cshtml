@addTagHelper "*, Microsoft.AspNetCore.Mvc.TagHelpers"

@{
    ViewData["Title"] = "Sales Home";
    Layout = "_Layout";
}

@section Links{
    <link rel="stylesheet" href="~/css/image-picker.css" />
    <link href="https://cdn.jsdelivr.net/npm/gijgo@1.9.10/css/gijgo.min.css" rel="stylesheet" type="text/css" />
    <link rel="stylesheet" href="~/lib/tabulator.css" />
}

<br />

<h2>Sales Dashboard <small>Control your Sign Requests</small></h2>

<h1>@ViewData["Message"]</h1>

<br />

<div class="card">
    <div class="card-header">
        <ul class="nav nav-tabs card-header-tabs nav-fill flex-column flex-md-row" id="salesTab" role="tablist">

            <li class="nav-item">
                <a class="nav-link active tab-link" id="create-tab" data-toggle="tab" role="tab" href="#createTab" aria-controls="createTab" aria-selected="true"><b>Create Request</b></a>
            </li>

            <li class="nav-item">
                <a class="nav-link tab-link" id="check-tab" data-toggle="tab" role="tab" href="#checkTab" aria-controls="checkTab" aria-selected="false"><b>Check Status</b></a>
            </li>

            <li class="nav-item">
                <a class="nav-link tab-link" id="prev-tab" data-toggle="tab" role="tab" href="#prevTab" aria-controls="prevTab" aria-selected="false"><b>Previous Requests</b></a>
            </li>

            <li class="nav-item">
                <a class="nav-link tab-link" id="account-tab" data-toggle="tab" role="tab" href="#accountTab" aria-controls="accountTab" aria-selected="false"><b>Account Management</b></a>
            </li>
        </ul>
    </div>

    <div class="card-body local-card-body">
        <div class="tab-content" id="salesTabContent">
            <div class="tab-pane fade show active" id="createTab" role="tabpanel" aria-labelledby="create-tab">
                <partial name="_CreateRequestPartial" />
            </div>

            <div class="tab-pane fade" id="checkTab" role="tabpanel" aria-labelledby="check-tab">
                <partial name="_CheckStatusPartial" />
            </div>

            <div class="tab-pane fade" id="prevTab" role="tabpanel" aria-labelledby="prev-tab">
                <partial name="_PreviousRequestPartial" />
            </div>

            <div class="tab-pane fade" id="accountTab" role="tabpanel" aria-labelledby="account-tab">
                <partial name="_AccountRequestPartial" />
            </div>
        </div>
    </div>
</div>


@section Scripts{
    <!--<script type="text/javascript" src="~/js/sales.js"></script>-->

    <script type="text/javascript" src="~/js/image-picker.js"></script>
    <script type="text/javascript" src="~/js/masonry.pkgd.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/gijgo@1.9.10/js/gijgo.min.js" type="text/javascript"></script>
    <script type="text/javascript" src="~/lib/tabulator.js"></script>
    <script type="text/javascript" src="~/lib/tabulator-module/ajax.js"></script>
    <script src="~/lib/tabulator-module/mutator.js"></script>

    <script>
        $(document).ready(function () {
            $('[data-toggle="popover"]').popover();

            $('.popover-dismiss').popover({
                trigger: 'focus'
            });

            $('#check-tab').on('click', function () {

                Tabulator.prototype.extendModule("mutator", "mutators", {
                    statusMutator: function (value, data, type, mutatorParams) {
                        if (value == 0) {
                            return "Submitted";
                        }
                        else if (value == 1) {
                            return "Approved";
                        }
                        else if (value == 2) {
                            return "In Queue";
                        }
                        else if (value == 3) {
                            return "Printed";
                        } // TODO: Add more values for "Ready (once it is cut, after printed)"
                        else return "ERROR";
                    },

                    mediaMutator: function (value, data, type, mutatorParams) {
                        if (value == 1) {
                            return "Adhesive";
                        }
                        else if (value == 2) {
                            return "Photo Glossy";
                        }
                        else if (value == 3) {
                            return "Matte Outdoor";
                        }
                        else if (value == 4) {
                            return "Plasticore";
                        }
                        else return "ERROR: S1";
                    },
                });

                var status = new Tabulator("#status-table", {
                    height: 250,
                    columns: [
                        //{ title: "ID", field: "id"}, // Checking that the ID is still tied to each request.
                        { title: "Request Num", field: "requestNumber" },                        
                        { title: "Status", field: "status", mutator: "statusMutator" },
                        //{ title: "Associate", field: } //TODO: need to get associate mapped
                        { title: "Media", field: "mediaFK", mutator: "mediaMutator" },
                        { title: "Quantity", field: "quantity" },
                        //{ title: "Dimensions", field: ""} //TODO: map dimensions
                        //{ title: "Brand", } // TODO: map brand
                        { title: "Width (inch)", field: "widthInch" },
                        { title: "Height (inch)", field: "heightInch" },
                        { title: "Proof Required", field: "isProofNeeded" }, //TODO: mutate to yes/no // TODO: add a proof status
                        { title: "Date Submitted", field: "requestedDate" },
                        //{ title: "Date Updated", field: ""} //TODO: send updated date
                        //{title: }
                    ],
                    ajaxConfig: "POST",
                    ajaxURL: "/Sales/GetRequestStatus",                    
                });
            });

            $('#prev-tab').on('click', function () {
                Tabulator.prototype.extendModule("mutator", "mutators", {
                    statusMutator: function (value, data, type, mutatorParams) {
                        if (value == 0) {
                            return "Submitted";
                        }
                        else if (value == 1) {
                            return "Approved";
                        }
                        else if (value == 2) {
                            return "In Queue";
                        }
                        else if (value == 3) {
                            return "Printed";
                        } // TODO: Add more values for "Ready (once it is cut, after printed)"
                        else return "ERROR: S1";
                    },

                    mediaMutator: function (value, data, type, mutatorParams) {
                        if (value == 1) {
                            return "Adhesive";
                        }
                        else if (value == 2) {
                            return "Photo Glossy";
                        }
                        else if (value == 3) {
                            return "Matte Outdoor";
                        }
                        else if (value == 4) {
                            return "Plasticore";
                        }
                        else return "ERROR: S1";
                    },
                });              

                var status = new Tabulator("#previous-table", {
                    height: 250,
                    columns: [
                        { title: "Request Num", field: "requestNumber" },
                        { title: "Status", field: "status", mutator: "statusMutator"},
                        //{ title: "Associate", field: } //TODO: need to get associate mapped
                        { title: "Media", field: "mediaFK", mutator: "mediaMutator" },
                        { title: "Quantity", field: "quantity" },
                        //{ title: "Dimensions", field: ""} //TODO: map dimensions
                        //{ title: "Brand", } // TODO: map brand
                        { title: "Width (inch)", field: "widthInch" },
                        { title: "Height (inch)", field: "heightInch" },
                        { title: "Proof Required", field: "isProofNeeded" }, //TODO: mutate to yes/no // TODO: add a proof status
                        { title: "Date Submitted", field: "requestedDate" },
                        //{ title: "Date Updated", field: ""} //TODO: send updated date
                        //{title: }
                    ],
                    ajaxConfig: "POST",
                    ajaxURL: "/Sales/GetOldRequests",
                });
            });

        });
    </script>

    <script>
        $('select[name="brandSelect"]').change(function () {
            if ($(this).val() != "Select Brand") {
                $("#templateBtn").prop('disabled', false);
            }
            else {
                $("#templateBtn").prop('disabled', true);
            }

            // Changing the templates in the modal
            let brand = {
                "BrandName": $('#templateBrand option:selected').val().trim()
            };

            $.ajax({
                type: "POST",
                url: "/Sales/GetTemplates",
                contentType: "application/json; charset=utf-8",
                dataType: "html",
                data: JSON.stringify(brand),
                success: function (result, status, xhr) {

                    result = result.replace('[', '');
                    result = result.replace(']', '');
                    result = result.replace(/\"/g, '');
                    var array = result.split(',');

                    $('#templateSelect').empty();
                    for (var i = 0; i < array.length; i++) {
                        var option = "<option data-img-src=" + array[i] + " value=\"" + array[i] + "\" data-img-class=\"template-picker\"></option>";
                        $('#templateSelect').append(option);
                    }
                    $(".image-picker").imagepicker({
                        hide_select: true,
                        show_label: false,
                        auto_update: true,
                    });
                    // will need to iterate over and determine class to apply for vertical or horizontal images
                },
                error: function (xhr, status, error) {
                    $("#dataDiv").html(error);
                }
            });
        });

        $('#templateSelect').change(function () {
            var optionSelected = $("option:selected", this);
            var valueSelected = this.value;

            var n = valueSelected.lastIndexOf('/');
            var result = valueSelected.substring(n + 1);

            $('#staticTemplate').attr("placeholder", result);
        });
    </script>

    <script>
        $('#dateneeded').datepicker({
            uiLibrary: 'bootstrap4',
            format: 'mm/dd/yyyy',
            minDate: function () {
                var date = new Date();
                date.setDate(date.getDate() + 1);
                return new Date(date.getFullYear(), date.getMonth(), date.getDate());
            },
            footer: true,
            modal: true,
            header: true

        });
    </script>

    <script>
        $('#orientationSwap').click(function () {
            var height = $('#heightInput').val();
            $('#heightInput').val($('#widthInput').val());
            $('#widthInput').val(height);

            var radioValue = $("input[name='signOrientation']:checked").val();
            var $orientation = $('input:radio[name=signOrientation]');
            if (radioValue == "vertical") {
                $orientation.filter('[value=vertical]').prop('checked', false);
                $orientation.filter('[value=horizontal]').prop('checked', true);
            }
            else {
                $orientation.filter('[value=vertical]').prop('checked', true);
                $orientation.filter('[value=horizontal]').prop('checked', false);
            }
        });

        $('#heightInput').change(function () {
            var $orientationRad = $('input:radio[name=signOrientation]');

            var h = parseFloat($('#heightInput').val());
            var w = parseFloat($('#widthInput').val());

            if (h > w) {
                $orientationRad.filter('[value=vertical]').prop('checked', true);
                $orientationRad.filter('[value=horizontal]').prop('checked', false);
            }
            else {
                $orientationRad.filter('[value=vertical]').prop('checked', false);
                $orientationRad.filter('[value=horizontal]').prop('checked', true);
            }
        });

        $('#widthInput').change(function () {
            var $orientationRad2 = $('input:radio[name=signOrientation]');

            var h2 = parseFloat($('#heightInput').val());
            var w2 = parseFloat($('#widthInput').val());

            if (w2 > h2) {
                $orientationRad2.filter('[value=vertical]').prop('checked', false);
                $orientationRad2.filter('[value=horizontal]').prop('checked', true);
            }
            else {
                $orientationRad2.filter('[value=vertical]').prop('checked', true);
                $orientationRad2.filter('[value=horizontal]').prop('checked', false);
            }
        });
    </script>

    <script>
        $('#customFile').on('change', function () {
            var fileName = $(this).val();
            $(this).next('.custom-file-label').html(fileName);
        });
    </script>

}


